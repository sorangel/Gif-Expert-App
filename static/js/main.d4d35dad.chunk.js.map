{"version":3,"sources":["Componets/AddCategory/AddCategory.js","Componets/GifGriditem/GifGridItem.js","helpers/getGifs.js","Componets/GifGrid/GifGrid.js","hooks/useFetchGifs.js","Componets/GifExpertApp/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","className","onSubmit","e","preventDefault","trim","length","cats","TextField","variant","value","onChange","target","fullWidth","label","prototype","PropTypes","func","isRequired","GifGridItem","title","url","Card","style","width","height","margin","CardContent","Typography","component","src","alt","objectFit","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","display","flexDirection","flexWrap","justifyContent","alignItems","image","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2QAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,UADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAgBhD,OACE,0BAAMC,UAAU,cAAcC,SAVX,SAACC,GACpBA,EAAEC,iBAEEL,EAAWM,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAWR,GAAX,mBAA0BQ,OACxCP,EAAc,OAMd,kBAACQ,EAAA,EAAD,CACEC,QAAQ,WACRC,MAAOX,EACPY,SAlBoB,SAACR,GACzBH,EAAcG,EAAES,OAAOF,QAkBnBG,WAAS,EACTC,MAAM,qBAMdlB,EAAYmB,UAAY,CACtBlB,cAAemB,IAAUC,KAAKC,Y,4BC5BnBC,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IACnC,OACE,kBAACC,EAAA,EAAD,CACErB,UAAU,sDACVsB,MAAO,CACLC,MAAO,mBACPC,OAAQ,IACRC,OAAQ,qBAGV,kBAACC,EAAA,EAAD,CACEJ,MAAO,CACLC,MAAO,OACPC,OAAQ,SAGV,kBAACG,EAAA,EAAD,CAAYnB,QAAQ,KAAKoB,UAAU,MAChCT,GAGH,yBACEU,IAAKT,EACLU,IAAKX,EACLG,MAAO,CACLS,UAAW,QACXR,MAAO,OACPC,OAAQ,a,yBChCPQ,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfd,EADe,0FAC0Ee,UAC7FF,GAFmB,wBAKFG,MAAMhB,GALJ,cAKfiB,EALe,gBAMEA,EAAKC,OANP,uBAMbC,EANa,EAMbA,KAEFC,EAAOD,EAAKE,KAAI,gBAAGC,EAAH,EAAGA,GAAIvB,EAAP,EAAOA,MAAOwB,EAAd,EAAcA,OAAd,MAA4B,CAChDD,KACAvB,QACAC,IAAG,OAAEuB,QAAF,IAAEA,OAAF,EAAEA,EAAQC,iBAAiBxB,QAXX,kBAadoB,GAbc,4CAAH,sDCIPK,EAAU,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdpC,mBAAS,CACjC0C,KAAM,GACNO,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRjB,EAAQC,GAAUiB,MAAK,SAACP,GACtBK,EAAS,CACPT,KAAMI,EACNG,SAAS,SAGZ,CAACb,IAEGc,EDZ2BI,CAAalB,GAAjCU,EADyB,EAC/BJ,KAAcO,EADiB,EACjBA,QAKtB,OACE,6BACE,wBAAI9C,UAAU,uDACXiC,GAEFa,GACC,uBAAG9C,UAAU,uDAAb,WAIF,yBACEsB,MAAO,CACL8B,QAAS,OACT7B,MAAO,OACP8B,cAAe,MACfC,SAAU,OACVC,eAAgB,SAChBC,WAAY,eAGbb,EAAOF,KAAI,SAACgB,GAAD,OACV,kBAAC,EAAD,eAAaC,IAAKD,EAAMf,IAAQe,UE3B7BE,EAAe,WAAO,IAAD,EACI9D,mBAAS,CAAC,KADd,mBACzB+D,EADyB,KACbhE,EADa,KAEhC,OACE,6BACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BACA,4BACGgE,EAAWnB,KAAI,SAACR,GAAD,OACd,kBAAC,EAAD,CAASyB,IAAKzB,EAAUA,SAAUA,UCR5C4B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.d4d35dad.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"../GifExpertApp/styles.module.scss\";\nimport TextField from \"@material-ui/core/TextField\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"Naruto\");\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategories((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form className=\"addCategory\" onSubmit={handleSubmit}>\n      <TextField\n        variant=\"outlined\"\n        value={inputValue}\n        onChange={handleInputChange}\n        fullWidth\n        label=\"Buscar Gifs...\"\n      />\n    </form>\n  );\n};\n\nAddCategory.prototype = {\n  setCategories: PropTypes.func.isRequired,\n};\n","import React from \"react\";\n//import PropTypes from 'prop-types';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n//import {GifGrid} from \"../GifGrid/GifGrid\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <Card\n      className=\"animate__animated animate__bounce animate__delay-2s\"\n      style={{\n        width: \"calc(50% - 20px)\",\n        height: 400,\n        margin: \"0 10px 20px 10px\",\n      }}\n    >\n      <CardContent\n        style={{\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      >\n        <Typography variant=\"h5\" component=\"h2\">\n          {title}\n        </Typography>\n\n        <img\n          src={url}\n          alt={title}\n          style={{\n            objectFit: \"cover\",\n            width: \"100%\",\n            height: \"100%\",\n          }}\n        />\n      </CardContent>\n    </Card>\n  );\n};\n/*GifGridItem.propTypes = {\n    title: PropTypes.string.isRequired,\n    url: PropTypes.string.isRequired\n}; */\n","//images?.downsized_medium = undefined;\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=YjjEqh644F0px98Jl89b3Qq471Yp3evK&q=${encodeURI(\n    category\n  )}&limit=20\";`;\n\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n\n  const gifs = data.map(({ id, title, images }) => ({\n    id,\n    title,\n    url: images?.downsized_medium.url,\n  }));\n  return gifs;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { GifGridItem } from \"../GifGriditem/GifGridItem\";\n//import { getGifs } from \"../helpers/getGifs\";\nimport { useFetchGifs } from \"../../hooks/useFetchGifs\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loading } = useFetchGifs(category);\n  //useEffect(() => {\n  //getGifs(category).then(setImagesGif);\n  //}, [category]);\n\n  return (\n    <div>\n      <h3 className=\"animate__animated animate__bounce animate__fadeIn-2\">\n        {category}\n      </h3>\n      {loading && (\n        <p className=\"animate__animated animate__bounce animate__fadeIn-3\">\n          Loading\n        </p>\n      )}\n      <div\n        style={{\n          display: \"flex\",\n          width: \"100%\",\n          flexDirection: \"row\",\n          flexWrap: \"wrap\",\n          justifyContent: \"center\",\n          alignItems: \"flex-start\",\n        }}\n      >\n        {images.map((image) => (\n          <GifGridItem key={image.id} {...image} />\n        ))}\n      </div>\n    </div>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({\n    data: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((images) => {\n      setState({\n        data: images,\n        loading: false,\n      });\n    });\n  }, [category]);\n\n  return state; // {data: [] , loading : true } ;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"../AddCategory/AddCategory\";\nimport { GifGrid } from \"../GifGrid/GifGrid\";\nimport \"./styles.module.scss\";\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState([\"\"]);\n  return (\n    <div>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </div>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { GifExpertApp } from \"./Componets/GifExpertApp/GifExpertApp\";\n\n//import \"styles.scss\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n"],"sourceRoot":""}